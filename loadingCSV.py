import pandas as pd     # all related to data handling and saving
from web3 import Web3   # for Ethereum Interaction using Web3 
import json             # To read and load JSON File Generated by the python code
import time             # For time related functions

# Load CSV
df = pd.read_csv("landscape_project_with_payment.csv")      # Ensure the CSV file is in the same directory or provide the correct path

# Connecting to Ganache
ganache_url = "http://127.0.0.1:7545"           # This is my Ganache URL 
web3 = Web3(Web3.HTTPProvider(ganache_url))     

# Contract details
contract_address = web3.to_checksum_address("0x5dA13C212C24E3Eb72b3b57E945339a4C11f068C") #This is the correct contract address from Remix IDE as of JUNE 8, 2025
with open("landscape_project_with_payment.json") as f:
    abi = json.load(f)

contract = web3.eth.contract(address=contract_address, abi=abi)
web3.eth.default_account = web3.eth.accounts[0]

# Helper: map status/payment to uint8
def status_to_uint8(status, status_list):
    try:
        return status_list.index(status)
    except ValueError:
        return 0

project_statuses = [
    "Schematics Phase", "Design Devt. Phase", "Contract Document Phase", "Construction Phase", "Maintenance Phase"
]
payment_statuses = ["Paid", "Pending", "Overdue"]

for idx, row in df.iterrows():          #idx is the index of the row, row is the data in that row
    # Prepare nested structs
    locationInfo = (                    # locationInfo is a tuple that contains the location data    
        row["location"],
        int(row["latitude"] * 1e6),     # Solidity expects int, so multiply float by 1e6
        int(row["longitude"] * 1e6),    
        int(row["elevation_meters"])
    )                                   # tuple is a data structure that can hold multiple items, similar to a list but immutable
    environmentData = (                 # environmentData is a tuple that contains the environment data
        
        row["vegetation_type"],
        int(row["density_of_vegetation"]),
        int(row["soil_moisture"]),
        int(row["temperature_c"]),
        int(row["humidity_percent"]),
        int(row["wind_speed_kph"]),
        int(row["sunlight_hours"]),
        row["weather_condition"],
        int(row["environmental_impact_assessment_score"])
    )
    financialData = (
        int(row["budget_allocated_php"]),
        int(row["contract_amount_php"]),
        int(row["deposit_php"]),
        int(row["withdraw_php"]),
        int(row["balance_checker_php"]),
        status_to_uint8(row["payment_status"], payment_statuses)
    )
    projectDetails = (
        row["project_type"],
        status_to_uint8(row["project_status"], project_statuses),
        int(row["water_usage_liters"]),
        bool(row["maintenance_required"]),
        str(row["landscape_architect_id"]),
        row["owner"],
        row["designer"]
    )

    # Call contract function
    tx_hash = contract.functions.createProject(
        row["project_id"],
        locationInfo,
        environmentData,
        financialData,
        projectDetails
    ).transact()

    # Wait for transaction receipt (optional, for reliability)
    web3.eth.wait_for_transaction_receipt(tx_hash)
    print(f"Uploaded project {row['project_id']} ({idx+1}/{len(df)})")

    # Optional: sleep to avoid nonce issues if needed
    # time.sleep(0.1)

print("âœ… All projects uploaded to Ganache smart contract.")